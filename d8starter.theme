<?php
use \Drupal\file\Entity\File;
use \Drupal\Core\Template\Attribute;
use \Drupal\Core\Url;

/* For testing system messages 
drupal_set_message('This is an error', 'error');
drupal_set_message('ERROR2', 'error');
drupal_set_message('WARNING', 'warning');
drupal_set_message('OK');
drupal_set_message('OK2'); 
*/


/* Put placeholders on login forms
*/
function d8starter_form_user_login_form_alter(&$form, $form_state) {
  $form['name']['#placeholder'] = t('Username or Email');
  $form['pass']['#placeholder'] = t('Password');
}

function d8starter_preprocess_node(&$vars) {
  $node = $vars['node'];
  $type = $node->getType();
  if( $type == "resource" && $node->hasField('field_file')){
      //next gets FieldItemList
      //$file = $node->get('field_file');  

      //you need get the file entity
      $file = $node->get('field_file')->entity;
      $vars["size"] = $file->getSize();
      $vars["type"] = $file->getMimeType();
	  //$vars["path"] = $file->getUrl();
	  //$file = File::load($file_id);
	  $uri = $file->getFileUri();
	$stream_wrapper_manager = \Drupal::service('stream_wrapper_manager')->getViaUri($uri);
	$file_path = $stream_wrapper_manager->realpath();

  }
}


/**
 * @file
 * Functions to support theming in the Tofacile theme.
 */


function d8starter_preprocess_file_link(&$variables){
  $file = $variables['file'];
  $options = [];
  $file_entity = $file instanceof File ? $file : File::load($file->fid);

  // @todo Wrap in file_url_transform_relative(). This is currently
  // impossible. As a work-around, we currently add the 'url.site' cache context
  // to ensure different file URLs are generated for different sites in a
  // multisite setup, including HTTP and HTTPS versions of the same site.
  // Fix in https://www.drupal.org/node/2646744.
  $url = file_create_url($file_entity
    ->getFileUri());
  $variables['#cache']['contexts'][] = 'url.site';
  $mime_type = $file
    ->getMimeType();

  // Set options as per anchor format described at
  // http://microformats.org/wiki/file-format-examples
  $options['attributes']['type'] = $mime_type . '; length=' . $file
      ->getSize();

  // Use the description as the link text if available.
  if (empty($variables['description'])) {
    $link_text = $file_entity
      ->getFilename();
  }
  else {
    $link_text = $variables['description'];
    $options['attributes']['title'] = $file_entity
      ->getFilename();
  }

  // Classes to add to the file field for icons.
  $classes = [
    'file',
    // Add a specific class for each and every mime type.
    'file--mime-' . strtr($mime_type, [
      '/' => '-',
      '.' => '-',
    ]),
    // Add a more general class for groups of well known MIME types.
    'file--' . file_icon_class($mime_type),
  ];

  // Set file classes to the options array.
  $variables['attributes'] = new Attribute($variables['attributes']);
  $variables['attributes']
    ->addClass($classes);
  $variables['link'] = \Drupal::l($link_text, Url::fromUri($url, $options));
}